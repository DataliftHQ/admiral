// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: meta/v1/meta.proto

package metav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetaAPI_GetMeta_FullMethodName = "/admiral.meta.v1.MetaAPI/GetMeta"
)

// MetaAPIClient is the client API for MetaAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaAPIClient interface {
	GetMeta(ctx context.Context, in *GetMetaRequest, opts ...grpc.CallOption) (*GetMetaResponse, error)
}

type metaAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaAPIClient(cc grpc.ClientConnInterface) MetaAPIClient {
	return &metaAPIClient{cc}
}

func (c *metaAPIClient) GetMeta(ctx context.Context, in *GetMetaRequest, opts ...grpc.CallOption) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	err := c.cc.Invoke(ctx, MetaAPI_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaAPIServer is the server API for MetaAPI service.
// All implementations should embed UnimplementedMetaAPIServer
// for forward compatibility
type MetaAPIServer interface {
	GetMeta(context.Context, *GetMetaRequest) (*GetMetaResponse, error)
}

// UnimplementedMetaAPIServer should be embedded to have forward compatible implementations.
type UnimplementedMetaAPIServer struct {
}

func (UnimplementedMetaAPIServer) GetMeta(context.Context, *GetMetaRequest) (*GetMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}

// UnsafeMetaAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaAPIServer will
// result in compilation errors.
type UnsafeMetaAPIServer interface {
	mustEmbedUnimplementedMetaAPIServer()
}

func RegisterMetaAPIServer(s grpc.ServiceRegistrar, srv MetaAPIServer) {
	s.RegisterService(&MetaAPI_ServiceDesc, srv)
}

func _MetaAPI_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaAPIServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaAPI_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaAPIServer).GetMeta(ctx, req.(*GetMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaAPI_ServiceDesc is the grpc.ServiceDesc for MetaAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admiral.meta.v1.MetaAPI",
	HandlerType: (*MetaAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeta",
			Handler:    _MetaAPI_GetMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meta/v1/meta.proto",
}
