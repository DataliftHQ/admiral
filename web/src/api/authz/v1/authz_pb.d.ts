// @generated by protoc-gen-es v1.8.0
// @generated from file authz/v1/authz.proto (package admiral.authz.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ActionType } from "../../common/v1/schema_pb.js";

/**
 * @generated from enum admiral.authz.v1.Decision
 */
export declare enum Decision {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DENY = 1;
   */
  DENY = 1,

  /**
   * @generated from enum value: ALLOW = 2;
   */
  ALLOW = 2,
}

/**
 * @generated from message admiral.authz.v1.Subject
 */
export declare class Subject extends Message<Subject> {
  /**
   * @generated from field: string user = 1;
   */
  user: string;

  /**
   * @generated from field: repeated string groups = 2;
   */
  groups: string[];

  constructor(data?: PartialMessage<Subject>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "admiral.authz.v1.Subject";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subject;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subject;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subject;

  static equals(a: Subject | PlainMessage<Subject> | undefined, b: Subject | PlainMessage<Subject> | undefined): boolean;
}

/**
 * @generated from message admiral.authz.v1.CheckRequest
 */
export declare class CheckRequest extends Message<CheckRequest> {
  /**
   * @generated from field: admiral.authz.v1.Subject subject = 1;
   */
  subject?: Subject;

  /**
   * @generated from field: string method = 2;
   */
  method: string;

  /**
   * @generated from field: admiral.common.v1.ActionType action_type = 3;
   */
  actionType: ActionType;

  /**
   * @generated from field: string resource = 4;
   */
  resource: string;

  constructor(data?: PartialMessage<CheckRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "admiral.authz.v1.CheckRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRequest;

  static equals(a: CheckRequest | PlainMessage<CheckRequest> | undefined, b: CheckRequest | PlainMessage<CheckRequest> | undefined): boolean;
}

/**
 * @generated from message admiral.authz.v1.CheckResponse
 */
export declare class CheckResponse extends Message<CheckResponse> {
  /**
   * @generated from field: admiral.authz.v1.Decision decision = 1;
   */
  decision: Decision;

  constructor(data?: PartialMessage<CheckResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "admiral.authz.v1.CheckResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckResponse;

  static equals(a: CheckResponse | PlainMessage<CheckResponse> | undefined, b: CheckResponse | PlainMessage<CheckResponse> | undefined): boolean;
}

